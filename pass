#!/bin/bash -e
# Copyright (c) 2013 Jean Guyomarc'h
# See license and stuff at the hosting page https://github.com/jeanguyomarch/pass

# Globals
PROGRAM="pass"
VERSION="1.0"
KEY=
VERBOSE=0
CFILE="$HOME/.cryptofile"
TFILE="$HOME/.cryptofile_tmp"

# Functions
function usage()
{
   echo
   echo "$PROGRAM usage:"
   echo
   echo "Add the [v] option for a verbose output (unsafe in public since your data will be displayed in stdout)"
   echo
   echo "   $PROGRAM -l                     : Display the list of stored data"
   echo "   $PROGRAM -[v]a <key>            : Add a new string to the encrypted database (or replace an existing value)"
   echo "   $PROGRAM -[v]x <key>            : Get the data stored for the given key"
   echo "   $PROGRAM -d <key>               : Delete the given key"
   echo "   $PROGRAM -s                     : Give statistics about the encrypted database"
   echo "   $PROGRAM -g                     : Generates a random password in your clipboard using openSSL"
   echo "   $PROGRAM -r <old key> <new key> : Rename a key with another"
   echo "   $PROGRAM -V                     : Shows the version of $0"
   echo "   $PROGRAM -L                     : Shows the license of $0"
   echo
}

function copy()
{
   echo -n "$@" | pbcopy
}

function paste()
{
   pbpaste
}

function cleanup()
{
   rm -f "$TFILE"
}
# Securit: we store confidential data in a file as a temporary place, we need to delete it absolutely!
trap cleanup EXIT

function cipher()
{
   if [ x"$KEY" == "x" ]; then
      echo "Enter your cipher key:"
      stty -echo
      read KEY
      stty echo
   fi
}

function version()
{
   echo "$PROGRAM version $VERSION"
}

function license()
{
   echo "The MIT License (MIT)"
   echo
   echo "Copyright (c) 2013 Jean Guyomarc'h"
   echo
   echo "Permission is hereby granted, free of charge, to any person obtaining a copy"
   echo "of this software and associated documentation files (the \"Software\"), to deal"
   echo "in the Software without restriction, including without limitation the rights"
   echo "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
   echo "copies of the Software, and to permit persons to whom the Software is"
   echo "furnished to do so, subject to the following conditions:"
   echo
   echo "The above copyright notice and this permission notice shall be included in"
   echo "all copies or substantial portions of the Software."
   echo
   echo "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
   echo "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
   echo "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
   echo "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
   echo "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
   echo "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"
   echo "THE SOFTWARE."
}

function err()
{
   echo "*** $@" >&2
}

function list()
{
   eet -l "$CFILE" | sort
}

function add()
{
   echo "Enter the data you want to store:"
   stty -echo
   read val
   stty echo

   cipher

   echo "$val" > "$TFILE"
   eet -i "$CFILE" "$1" "$TFILE" 1 "$KEY"
   rm -f "$TFILE"

   if [ $VERBOSE -eq 1 ]; then
      echo "Storing [$1] -> [$val] for cipher key [$KEY]"
   fi
}

function key()
{
   cipher

   touch "$TFILE"
   eet -x "$CFILE" "$1" "$TFILE" "$KEY"
   val=`cat "$TFILE"`
   rm -f "$TFILE"
   copy "$val"

   if [ $VERBOSE -eq 1 ]; then
      echo "[$1] -> [$val] with cipher key [$KEY]"
   fi
}

function del()
{
   if [ x"$2" != x"--force" ]; then
      echo "You are going to remove definitly [$1]. Please confirm with [y], any other key to abort"
      read val
      if [ x"$val" == "xy" ] || [ x"$val" == "xY" ]; then
         eet -r "$CFILE" "$1"
      else
         echo "Deletion of [$1] aborted."
      fi
   else
      eet -r "$CFILE" "$1"
   fi
}

function stats()
{
   eet -t "$CFILE"
}

function gen()
{
   val=`openssl rand -base64 48`
   if [ x"$1" == "x" ]; then
      copy "$val"
   else
      if [ $1 -gt 64 ]; then
         err "Cannot have more than 64 digits"
         exit 1
      fi
      str=${val:0:$1}
      copy "$str"
   fi
}

function ren()
{
   old="$1"
   new="$2"

   pboard="`paste`"
   key "$1"
   val=`paste`
   del "$1" --force

   echo "$val" > "$TFILE"
   eet -i "$CFILE" "$new" "$TFILE" 1 "$KEY"
   rm -f "$TFILE"
   copy "$pboard"
}

touch "$CFILE"
# Cleanup
rm -f "$TFILE"

# Execute getopt
if [ $# -eq 0 ]; then
   usage
   exit 1
fi

arg1="$1"
arg2="$2"
arg3="$3"

set -- $(getopt vhVLla:x:d:sgr:: "$@")
while [ $# -gt 0 ]; do
   case "$1" in
      -v)
         VERBOSE=1
         ;;
      -h)
         usage
         exit 0
         ;;
      -V)
         version
         exit 0
         ;;
      -L)
         license
         exit 0
         ;;
      -l)
         list
         exit 0
         ;;
      -a)
         add "$2"
         shift
         exit 0
         ;;
      -x)
         key "$2"
         shift
         exit 0
         ;;
      -d)
         del "$2"
         shift
         exit 0
         ;;
      -s)
         stats
         exit 0
         ;;
      -g)
         gen "$arg2"
         exit 0
         ;;
      -r)
         if [ ${#arg3} -lt 1 ]; then
            err "New key is [$arg3]"
            exit 1
         fi
         ren "$2" "$arg3"
         exit 0
         ;;
      --)
         shift
         break
         ;;
      -*)
         err "$PROGRAM: invalid argument"
         usage
         exit 1
         ;;
      *)
         break
         ;;
   esac
   shift
done

